/* NSObject *NXReadNSObjectFromCoder(NSCoder *decoder);
 */
PyObject* objc_NXReadNSObjectFromCoder(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "decoder", NULL };
	PyObject* result;
	NSObject* oc_result;
	PyObject* decoder
	id objc_decoder

	NS_DURING
		objc_result = NXReadNSObjectFromCoder( objc_decoder );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* BOOL NSIsFreedObject(id anObject);
 */
PyObject* objc_NSIsFreedObject(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "anObject", NULL };
	PyObject* result;
	BOOL oc_result;
	PyObject* anObject
	id objc_anObject

	NS_DURING
		objc_result = NSIsFreedObject( objc_anObject );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyBool_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSCountFrames(void);
 */
PyObject* objc_NSCountFrames(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	unsigned oc_result;

	NS_DURING
		objc_result = NSCountFrames( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* BOOL NSJavaNeedsVirtualMachine(NSDictionary *plist);
 */
PyObject* objc_NSJavaNeedsVirtualMachine(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "plist", NULL };
	PyObject* result;
	BOOL oc_result;
	PyObject* plist
	id objc_plist

	NS_DURING
		objc_result = NSJavaNeedsVirtualMachine( objc_plist );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyBool_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* BOOL NSJavaProvidesClasses(NSDictionary *plist);
 */
PyObject* objc_NSJavaProvidesClasses(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "plist", NULL };
	PyObject* result;
	BOOL oc_result;
	PyObject* plist
	id objc_plist

	NS_DURING
		objc_result = NSJavaProvidesClasses( objc_plist );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyBool_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* BOOL NSJavaNeedsToLoadClasses(NSDictionary *plist);
 */
PyObject* objc_NSJavaNeedsToLoadClasses(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "plist", NULL };
	PyObject* result;
	BOOL oc_result;
	PyObject* plist
	id objc_plist

	NS_DURING
		objc_result = NSJavaNeedsToLoadClasses( objc_plist );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyBool_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* id NSJavaObjectNamedInPath(NSString *name, NSArray *path);
 */
PyObject* objc_NSJavaObjectNamedInPath(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "name", "path", NULL };
	PyObject* result;
	id oc_result;
	char* name
	NSString* objc_name
	PyObject* path
	id objc_path

	NS_DURING
		objc_result = NSJavaObjectNamedInPath( objc_name , objc_path );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* id NSJavaBundleSetup(NSBundle *bundle, NSDictionary *plist);
 */
PyObject* objc_NSJavaBundleSetup(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "bundle", "plist", NULL };
	PyObject* result;
	id oc_result;
	PyObject* bundle
	id objc_bundle
	PyObject* plist
	id objc_plist

	NS_DURING
		objc_result = NSJavaBundleSetup( objc_bundle , objc_plist );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* void NSJavaBundleCleanup(NSBundle *bundle, NSDictionary *plist);
 */
PyObject* objc_NSJavaBundleCleanup(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "bundle", "plist", NULL };
	PyObject* result;
	PyObject* bundle
	id objc_bundle
	PyObject* plist
	id objc_plist

	NS_DURING
		objc_result = NSJavaBundleCleanup( objc_bundle , objc_plist );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = Py_None;
	Py_INCREF(result);
	return result;
}
/* void NSIncrementExtraRefCount(id object);
 */
PyObject* objc_NSIncrementExtraRefCount(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "object", NULL };
	PyObject* result;
	PyObject* object
	id objc_object

	NS_DURING
		objc_result = NSIncrementExtraRefCount( objc_object );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = Py_None;
	Py_INCREF(result);
	return result;
}
/* BOOL NSDecrementExtraRefCountWasZero(id object);
 */
PyObject* objc_NSDecrementExtraRefCountWasZero(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "object", NULL };
	PyObject* result;
	BOOL oc_result;
	PyObject* object
	id objc_object

	NS_DURING
		objc_result = NSDecrementExtraRefCountWasZero( objc_object );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyBool_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSExtraRefCount(id object);
 */
PyObject* objc_NSExtraRefCount(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "object", NULL };
	PyObject* result;
	unsigned oc_result;
	PyObject* object
	id objc_object

	NS_DURING
		objc_result = NSExtraRefCount( objc_object );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* NSString *NSUserName(void);
 */
PyObject* objc_NSUserName(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	NSString* oc_result;

	NS_DURING
		objc_result = NSUserName( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* NSString *NSFullUserName(void);
 */
PyObject* objc_NSFullUserName(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	NSString* oc_result;

	NS_DURING
		objc_result = NSFullUserName( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* NSString *NSHomeDirectory(void);
 */
PyObject* objc_NSHomeDirectory(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	NSString* oc_result;

	NS_DURING
		objc_result = NSHomeDirectory( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* NSString *NSHomeDirectoryForUser(NSString *userName);
 */
PyObject* objc_NSHomeDirectoryForUser(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "userName", NULL };
	PyObject* result;
	NSString* oc_result;
	char* userName
	NSString* objc_userName

	NS_DURING
		objc_result = NSHomeDirectoryForUser( objc_userName );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* NSString *NSTemporaryDirectory(void);
 */
PyObject* objc_NSTemporaryDirectory(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	NSString* oc_result;

	NS_DURING
		objc_result = NSTemporaryDirectory( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* NSString *NSOpenStepRootDirectory(void);
 */
PyObject* objc_NSOpenStepRootDirectory(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	NSString* oc_result;

	NS_DURING
		objc_result = NSOpenStepRootDirectory( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = ObjC_IdToPython(objc_result); if (result == NULL) return NULL;
	return result;
}
/* unsigned NSPageSize(void);
 */
PyObject* objc_NSPageSize(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	unsigned oc_result;

	NS_DURING
		objc_result = NSPageSize( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSLogPageSize(void);
 */
PyObject* objc_NSLogPageSize(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	unsigned oc_result;

	NS_DURING
		objc_result = NSLogPageSize( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSRoundUpToMultipleOfPageSize(unsigned bytes);
 */
PyObject* objc_NSRoundUpToMultipleOfPageSize(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "bytes", NULL };
	PyObject* result;
	unsigned oc_result;
	unsigned objc_bytes

	NS_DURING
		objc_result = NSRoundUpToMultipleOfPageSize( objc_bytes );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSRoundDownToMultipleOfPageSize(unsigned bytes);
 */
PyObject* objc_NSRoundDownToMultipleOfPageSize(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { "bytes", NULL };
	PyObject* result;
	unsigned oc_result;
	unsigned objc_bytes

	NS_DURING
		objc_result = NSRoundDownToMultipleOfPageSize( objc_bytes );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
/* unsigned NSRealMemoryAvailable(void);
 */
PyObject* objc_NSRealMemoryAvailable(PyObject* self, PyObject* args, PyObject* kwds)
{
static	char* keywords[] = { NULL };
	PyObject* result;
	unsigned oc_result;

	NS_DURING
		objc_result = NSRealMemoryAvailable( );
	NS_HANDLER
		ObjCErr_FromObjC();
		return NULL;
	NS_ENDHANDLER
	result = PyInt_FromLong(objc_result);
	if (result == NULL) return NULL;
	return result;
}
