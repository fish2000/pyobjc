==============================================
Notes on supported APIs and classes on MacOS X
==============================================

.. :author: Ronald Oussoren

.. Contents::

Introduction
------------

*NOTE*: This document is very incomplete.

This document describes the restrictions w.r.t. supported APIs and classes
on MacOS X. In general you can use classes and global functions just like
in Objective-C (e.g. the Apple developer documentaton applies), but in some
cases there are special considerations.

We also do not provide access to global functions that are not usefull for
Python programs, those functions are listed below.

The general rules are listed in ..., this document provides the exceptions to
those rules.

This document is target at the latest supported version of MacOS X (currenlty
MacOS X 10.2.x), unless specifically noted the same restrictions apply to 
earlier versions of MacOS X. Earlier versions of the OS have less extensive
APIs, PyObjC does *not* provide a compatibility layer.

Frameworks not listed below are not wrapped by PyObjC, they can still be
accessed although without access to constants and global functions defined
by those frameworks.

Core objective-C runtime
------------------------

Class Protocol
..............

* ``descriptionForClassMethod:``, ``descriptionForInstanceMethod``
  These methods are not supported, protocols are hardly ever used explicitly
  in Cocoa therefore this should not be a problem.

Addressbook framework
---------------------

We do not provide access to the global functions in that framework, because
the same functionality can be accessed by using the object-oriented interface.

AppKit framework
----------------

NSPoint is a tuple of 2 floats, or use ``AppKit.NSMakePoint()``.

NSSize is a tuple of 2 floats, or use ``AppKit.NSMakeSize()``.

NSRect is a tuple of an NSPoint and an NSSize, or use ``AppKit.NSMakeRect()``.

The methods that are used as callbacks for sheet related operations should
be methods that have explicit selector wrappers using ``NSEndSheetMethod``. 
(XXX: I don't think I would understand this myself, need to rephrase)

Class NSBezierPath
..................

* ``getLineDash:count:phase:``
  This method is not supported, I (Ronald) could not find a way to detect the
  required size for the pattern buffer. 

* ``appendBezierPathWithGlyphs:count:inFont:``
  The first argument is a list of integers, count should be at most the lenght
  of the first argument.

* ``appendBezierPathWithPoints:count:``
  The first argument is a list of points, count should be at most the lenght
  of the first argument. 

* ``setAssociatedPoints:atIndex:``
  Implementing this method in Python is not yet supported.

* All other methods are supported (MacOS X 10.2)


Foundation framework
--------------------

NOTE: The list below is mostly based on scripts that find methods that can
not be automaticly handled by the bridge. We have not yet performed a manual
search for such methods in the Cocoa documentation.

The ``-forward::`` method is not supported. It's functionality can be accessed
using the python function ``apply``. The ``performv::`` method is also not
supported, with a simular work-around.

Class NSArray
.............

* ``initWithObjects:``, ``arrayWithObjects:``
  These methods are not supported, use ``initWithArray:`` instead.

* ``getObjects:``
  This method is not supported, accessing the objects using the usual
  accessor methods is just as efficient as using this method.

* ``getObjects:inRange:``
  This method is not supported, accessing the objects using the usual
  accessor methods is just as efficient as using this method.

* ``sortedArrayUsingFunction:context:`` and ``sortedArrayUsingFunction:context:hint``
  These methods can be called from Python, but you cannot override them
  from Python. This limitation will be lifted in a future version of PyObjC.

Class NSBundle
..............

* ``bundleForClass:``
  This method does not work correctly for classes defined in Python, these
  all seem be defined in the ``mainBundle()``. As a workaround you can use
  the function ``objc.pluginBundle(name)`` to find the NSBundle for your
  Python based bundle. See Examples/PrefPane for an example of its usage.

Class NSData
............

* ``initWithBytesNoCopy:length:``
  This method is not supported, use ``initWithBytes:length:`` instead.

* ``initWithBytesNoCopy:length:freeWhenDone:``
  This method is not supported, use ``initWithBytes:length:`` instead.

* ``dataWithBytesNoCopy:length:``
  This method is not supported, use ``dataWithBytes:length:`` instead.

* ``dataWithBytesNoCopy:length:freeWhenDone:``
  This method is not supported, use ``dataWithBytes:length:`` instead.

* ``deserializeAlignedBytesLengthAtCursor:``
  This is a depricated method, see Apple documentation.

* ``deserializeBytes:length:atCursor:``
  This is a depricated method, see Apple documentation.

* ``deserializeDataAt:ofObjCType:atCursor:context:``
  This is a depricated method, see Apple documentation.

* ``deserializeIntAtCursor:``
  This is a depricated method, see Apple documentation.

* ``deserializeInts:count:atCursor:``
  This is a depricated method, see Apple documentation.

* ``deserializeInts:count:atIndex:``
  This is a depricated method, see Apple documentation.



Class NSDictionary
..................

The (undocumented) methods ``getKeys:``, ``getObjects:`` and 
``getObjects:andKeys:`` are not supported.

Class NSFault
.............

The ``extraData`` argument/return value for ``-extraData`` and 
``setTargetClassextraData:`` is represented as an integer.

Class NSMutableArray
....................

* ``sortUsingFunction:context:``, ``sortUsingFunction:context:range:``
  Calling this method from Python is supported, overriding it in a subclass
  is not. This limitation will be fixed in a later version of PyObjC.

Class NSScriptObjectSpecifier
.............................

* ``indicesOfObjectsByEvaluatingWithContainer:count:``
  Implementing this in Python is not supported yet. We're looking for a way
  to avoid leaking the returned buffer, as we cannot return a pointer to an
  internal datastructure.

Class NSSet
...........

* ``initWithObjects:``, ``setWithObjects:``
  This method is not supported, use ``initWithArray:`` instead.


Class NSString
..............

* ``initWithCharactersNoCopy:length:freeWhenDone:`` 
  This method is unsupported because we cannot guarantee that the buffer wil
  be available as long as the string is. Use ``initWithCharacters:`` instead.

InterfaceBuilder framework
--------------------------

T.B.D.

PreferencePanes framework
-------------------------

T.B.D.
