# This file is generated by objective.metadata
#
# Last update: Thu Feb 23 11:19:39 2012

import objc, sys

if sys.maxint > 2 ** 32:
    def sel32or64(a, b): return b
else:
    def sel32or64(a, b): return a
if sys.byteorder == 'little':
    def littleOrBig(a, b): return a
else:
    def littleOrBig(a, b): return b

misc = {
}
constants = '''$IMKCandidatesOpacityAttributeName$IMKCandidatesSendServerKeyEventFirst$IMKControllerClass$IMKDelegateClass$IMKModeDictionary$kIMKCommandClientName$kIMKCommandMenuItemName$'''
enums = '''$kIMKAnnotation@1$kIMKLocateCandidatesAboveHint@1$kIMKLocateCandidatesBelowHint@2$kIMKLocateCandidatesLeftHint@3$kIMKLocateCandidatesRightHint@4$kIMKMain@0$kIMKScrollingGridCandidatePanel@2$kIMKSingleColumnScrollingCandidatePanel@1$kIMKSingleRowSteppingCandidatePanel@3$kIMKSubList@2$'''
misc.update({})
r = objc.registerMetaDataForSelector
objc._updatingMetadata(True)
try:
    r('IMKCandidates', b'dismissesAutomatically', {'retval': {'type': 'Z'}})
    r('IMKCandidates', b'isVisible', {'retval': {'type': 'Z'}})
    r('IMKCandidates', b'selectCandidateWithIdentifier:', {'retval': {'type': b'Z'}})
    r('IMKCandidates', b'selectionKeysKeylayout', {'retval': {'type': '^{__TISInputSource=}'}})
    r('IMKCandidates', b'setDismissesAutomatically:', {'arguments': {2: {'type': 'Z'}}})
    r('IMKCandidates', b'setSelectionKeysKeylayout:', {'arguments': {2: {'type': '^{__TISInputSource=}'}}})
    r('IMKInputController', b'doCommandBySelector:commandDictionary:', {'arguments': {2: {'type': ':'}}})
    r('IMKServer', b'lastKeyEventWasDeadKey', {'retval': {'type': b'Z'}})
    r('IMKServer', b'paletteWillTerminate', {'retval': {'type': b'Z'}})
    r('NSObject', b'didCommandBySelector:client:', {'retval': {'type': 'Z'}, 'arguments': {2: {'type': ':'}}})
    r('NSObject', b'handleEvent:client:', {'retval': {'type': 'Z'}})
    r('NSObject', b'inputText:client:', {'retval': {'type': 'Z'}})
    r('NSObject', b'inputText:key:modifiers:client:', {'retval': {'type': 'Z'}})
finally:
    objc._updatingMetadata(False)
r = objc.registerMetaDataForSelector
objc._updatingMetadata(True)
try:
    r('NSObject', b'activateServer:', {'required': True, 'retval': {'type': b'v'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'deactivateServer:', {'required': True, 'retval': {'type': b'v'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'modes:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'mouseDownOnCharacterIndex:coordinate:withModifier:continueTracking:client:', {'required': True, 'retval': {'type': 'Z'}, 'arguments': {2: {'type': sel32or64(u'I', u'Q')}, 3: {'type': sel32or64(u'{_NSPoint=ff}', u'{CGPoint=dd}')}, 4: {'type': sel32or64(u'I', u'Q')}, 5: {'type': '^Z', 'type_modifier': b'o'}, 6: {'type': b'@'}}})
    r('NSObject', b'mouseMovedOnCharacterIndex:coordinate:withModifier:client:', {'required': True, 'retval': {'type': b'Z'}, 'arguments': {2: {'type': sel32or64(b'I', b'L')}, 3: {'type': sel32or64(b'{_NSPoint=ff}', b'{CGPoint=dd}')}, 4: {'type': sel32or64(b'I', b'L')}, 5: {'type': b'@'}}})
    r('NSObject', b'mouseUpOnCharacterIndex:coordinate:withModifier:client:', {'required': True, 'retval': {'type': b'Z'}, 'arguments': {2: {'type': sel32or64(b'I', b'L')}, 3: {'type': sel32or64(b'{_NSPoint=ff}', b'{CGPoint=dd}')}, 4: {'type': sel32or64(b'I', b'L')}, 5: {'type': b'@'}}})
    r('NSObject', b'recognizedEvents:', {'required': True, 'retval': {'type': sel32or64(b'I', b'L')}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'setValue:forTag:client:', {'required': True, 'retval': {'type': b'v'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'l'}, 4: {'type': b'@'}}})
    r('NSObject', b'showPreferences:', {'required': True, 'retval': {'type': b'v'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'valueForTag:client:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'l'}, 3: {'type': b'@'}}})
finally:
    objc._updatingMetadata(False)
r = objc.registerMetaDataForSelector
objc._updatingMetadata(True)
try:
    r('NSObject', b'candidates:', {'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'commitComposition:', {'retval': {'type': b'v'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'composedString:', {'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}}})
    r('NSObject', b'didCommandBySelector:client:', {'retval': {'type': b'Z'}, 'arguments': {2: {'type': b':'}, 3: {'type': b'@'}}})
    r('NSObject', b'handleEvent:client:', {'retval': {'type': b'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}}})
    r('NSObject', b'inputText:client:', {'retval': {'type': b'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}}})
    r('NSObject', b'inputText:key:modifiers:client:', {'retval': {'type': b'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': sel32or64(b'i', b'l')}, 4: {'type': sel32or64(b'I', b'L')}, 5: {'type': b'@'}}})
    r('NSObject', b'originalString:', {'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}}})
finally:
    objc._updatingMetadata(False)
protocols={'IMKServerInput': objc.informal_protocol('IMKServerInput', [objc.selector(None, 'inputText:client:', b'Z@:@@', isRequired=False), objc.selector(None, 'candidates:', b'@@:@', isRequired=False), objc.selector(None, 'didCommandBySelector:client:', b'Z@::@', isRequired=False), objc.selector(None, 'handleEvent:client:', b'Z@:@@', isRequired=False), objc.selector(None, 'composedString:', b'@@:@', isRequired=False), objc.selector(None, 'inputText:key:modifiers:client:', sel32or64(b'Z@:@iI@', b'Z@:@lL@'), isRequired=False), objc.selector(None, 'commitComposition:', b'v@:@', isRequired=False), objc.selector(None, 'originalString:', b'@@:@', isRequired=False)])}
expressions = {}

# END OF FILE
