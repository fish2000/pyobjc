=========
Todo list
=========

.. contents:

Introduction
------------

This document contains an (incomplete) list of work items. 

Important items
---------------

Check/Fix consistency of method calling
.......................................

There are currently 3 ways for calling from Objective-C into Python:

* The methods stubs (in register.m and libffi_support.m)

* forwardInvocation in class-builder.m

* forwardInvocation in OC_PythonObject.m

These should be consistent with each other, and the first two should be
equivalent (but aren't as the latter doesn't support pass-by-reference 
arguments). Hmm, might as well try to merge the two forwardInvocation
implementations if at all possible...

The 'data-flow' for calling into Python from Objective-C should be the 
reverse of calling into Objective-C from Python (e.g. 
``libffi_support.m:method_stub`` should be the reverse of 
``libffi_support.m:ObjC_FFICaller``)

Better documentation
....................

There should be more developer documentation and end-user documentation is
virtually non-existant. Related to this is the website: This should be filled.

We should also merge ../BUGS and ../FIXME into one file, possibly even into
this file.

We should also add scripts to convert documentation to a format that is 
useable on the website.

Multi-threading support
.......................

The code should be mostly thread-safe, but this should be checked. Furthermore
we should add code that enables using python in multiple threads:

* Give up the global interpreter lock (GIL) before calling into Objective-C

* Make sure the current thread-state is stored in thread-local storage (TLS)
  before calling into Objective-C 

* Fetch the thread-state from a TLS during callbacks from Objective-C and
  create one if it doesn't exist yet. The latter assumes 1 python interpreter
  per process.

* Acquire the GIL during callbacks from Objective-C (this includes python
  methods called from Objective-C)

* A number of functions use static buffers, all in pyobjc_support.m and
  related to depythonify_c_value. Fixing this is relatively straightforward:
  raise a python exception if the conversion fails, instead of returning an
  error-string.


Test suite
..........

The test suite needs to be enhanced.


Less important items
--------------------

Refactor some parts of the bridge
.................................

From the top of my head:

* Conversion of numeric types to basic C types contains lots of duplicate code

* Should write a function for calculating the signature for a function/method
  object that is to be added to a class (check informal_protocols and methods
  in the superclass for signature and "class-methodness"). Use this when 
  defining python subclasses of ObjC classes (currently has this hardcoded) 
  and in the implementation of objc.classAddMethod (currently doesn't support
  raw functions).

Support for GNUstep
...................

We currently don't support GNUstep. Modules/objc/objc_support.h contains 
some definitions that help in supporting GNUstep, we should use those where
applicable. 

Support beyond that requires someone that actually tries to perform the 
port to GNUstep. 

Support for libFFI
..................

LibFFI_ is now fully supported and the default. Need to remove non-FFI 
support code as it is no longer needed. Check if we can use FFI to simplify
other code (most likely in class-builder.m)

Some PPC assembly magic is necessary in libFFI to remove a link-time warning (
see the mailing-list archives for details).

.. _LibFFI: http://sources.redhat.com/libffi

Naming convention / coding style
................................

Global symbols should be named with a prefix. We currently use several
prefixes and some symbols do not have a prefix at all. 

See the document `Coding style` for a proposal for a coding style and naming
convention. The code should be changed to conform to this document.

.. _`Coding style`: coding-style.txt

Add templates for various project-types
.......................................

We currently have a Project Builder template for a basic PyObjC application. We
should simular templates for other usefull projects and most importantly a 
document-based application. 

Other possibilies include:

* Standalone Service

* IBPalette

* PreferencePane

* Screen Saver

* Cocoa Bundle

In contrast to a template for a document-based application these last four 
require additional (Objective-C) code: There needs to be a mechanism to 
initialize a python interpreter and load the python code in the project when 
the plugin/bundle is loaded. Furthermore we need to make sure that exactly one 
interpreter is created, even when more than one Python based plugin/bundle is
loaded.

Complete Cocoa wrapping
.......................

We do not yet have a 100% coverage of the Cocoa API's. We also need code in
the testsuite that checks if the function wrappers are working as expected.

Someone needs to check if we correctly export all constants from Cocoa and if
the generation script finds all global functions.

MacOS 10.1 support
..................

The native code for supporting Cocoa don't compile on MacOS 10.1. Need a way
to conditionally compile parts of this code. Problem is that most of that code
is generated.

NOTE: At least one person has problems compiling Modules/objc on 10.1.

Pickle support
..............

Objective-C objects don't support pickling. They do pickle without errors using
protocol version 2 (Python >= 2.3a2), but that doesn't include the state of
the Objective-C object only that of the proxy.

NSCoder support
...............

It might be usefull to add default implementations of ``encodeWithCoder:`` and
``initWithCoder:`` methods to Python subclasses of Objective-C classes that 
implement these.
