<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Package Manager Database for PyObjC (Jaguar)</string>
	<key>Maintainer</key>
	<string>ronaldoussoren@mac.com</string>
	<key>Version</key>
	<string>0.3</string>
	<key>Packages</key>
	<array>
		<dict>
			<key>Description</key>
			<string>
Python &lt;-&gt; Objective-C bridge (Cocoa for Python).

PyObjC allows full interaction between Python and Objective-C objects,
including subclassing types from the other language. The primary
use of this is writing Python Graphical User Interfaces in Cocoa
using Interface Builder, but much more is possible, including
incorporating Python in your Objective-C program for rapid prototyping and
such.
			</string>
			<key>Download-URL</key>
			<string>http://heanet.dl.sourceforge.net/sourceforge/pyobjc/pyobjc-1.1.tar.gz</string>
			<key>Flavor</key>
			<string>source</string>
			<key>Install-test</key>
			<string>
import objc
from distutils.version import StrictVersion
if objc.__version__ == '1.1c1':
	raise OldInstalled, "Version %s installed"%objc.__version__
if StrictVersion(objc.__version__)  &lt; "1.1":
	raise OldInstalled, "Version %s installed"%objc.__version__
			</string>
			<key>Home-page</key>
			<string>http://pyobjc.sourceforge.net/</string>
			<key>Name</key>
			<string>PyObjC</string>
			<!--
			<key>Prerequisites</key>
			<array>
				<dict>
					<key>Name</key>
					<string>AppleDevTools</string>
				</dict>
			</array>
			-->
			<key>Version</key>
			<string>1.1</string>
			<key>MD5Sum</key>
			<string>a87c0ae37cc1c0b06be65c3a274758a5</string>
		</dict>
		<dict>
			<key>Description</key>
			<string>
Python &lt;-&gt; Objective-C bridge (Cocoa for Python).

PyObjC allows full interaction between Python and Objective-C objects,
including subclassing types from the other language. The primary
use of this is writing Python Graphical User Interfaces in Cocoa
using Interface Builder, but much more is possible, including
incorporating Python in your Objective-C program for rapid prototyping and
such.
			</string>
			<key>Download-URL</key>
			<string>http://heanet.dl.sourceforge.net/sourceforge/pyobjc/pyobjc-1.1-macosx10.2.tar.gz</string>
			<key>Flavor</key>
			<string>binary</string>
			<key>Install-test</key>
			<string>
import objc
from distutils.version import StrictVersion
if objc.__version__ == '1.1c1':
	raise OldInstalled, "Version %s installed"%objc.__version__
if StrictVersion(objc.__version__)  &lt; "1.1":
	raise OldInstalled, "Version %s installed"%objc.__version__
			</string>
			<key>Home-page</key>
			<string>http://pyobjc.sourceforge.net/</string>
			<key>Name</key>
			<string>PyObjC</string>
			<key>Prerequisites</key>
			<array>
			</array>
			<key>Version</key>
			<string>1.1</string>
			<key>MD5Sum</key>
			<string>5e7b35d9765bf9b1f31e5fb37cbf4c93</string>
		</dict>
		<dict>
			<key>Description</key>
			<string>
PyObjC Documentation and Examples.

The PyObjC binary installer misses the examples and documentation included
in the source distribution. This package installs those, into your
/Applications/MacPython-2.3/Extras folder.
			</string>
			<key>Download-URL</key>
			<string>http://heanet.dl.sourceforge.net/sourceforge/pyobjc/pyobjc_extras-1.1.tar.gz</string>
			<key>Flavor</key>
			<string>binary</string>
			<key>Install-test</key>
			<string>
if not os.access("/Applications/MacPython-2.3/Extras/pyobjc-1.1", 0): 
	raise NotInstalled
			</string>
			<key>Home-page</key>
			<string>http://pyobjc.sourceforge.net/</string>
			<key>Name</key>
			<string>PyObjC_Extras</string>
			<key>Prerequisites</key>
			<array>
			</array>
			<key>Version</key>
			<string>1.1</string>
			<key>MD5Sum</key>
			<string>9f7360cf9a0e733a8ef8b6c7f8d4fc7f</string>
			<key>Systemwide-only</key>
			<true/>
		</dict>
	</array>
</dict>
</plist>
