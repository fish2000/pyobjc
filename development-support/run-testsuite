#!/usr/bin/env python3 -B
"""
Helper script for running the PyObjC test suite
"""
import collections
import contextlib
import json
import json
import logging
import os
import os
import platform
import shutil
import subprocess
import sys
import sys

from _common_definitions import TOP_DIR, TEST_STATE_DIR, PY_VERSIONS
from _common_definitions import virtualenv, system_report
from _topsort import topological_sort


def sort_framework_wrappers():
    """
    Returns a list of framework wrappers in the order they should
    be build in.
    """
    frameworks = []
    partial_order = []

    for subdir in os.listdir(TOP_DIR):
        if not subdir.startswith('pyobjc-framework-'): continue

        setup = os.path.join(TOP_DIR, subdir, 'setup.py')

        requires = None
        with open(setup) as fp:
            for ln in fp:
                if requires is None:
                    if ln.strip().startswith('install_requires'):
                        requires = []
                else:
                    if ln.strip().startswith(']'):
                        break

                    dep = ln.strip()[1:-1]
                    if dep.startswith('pyobjc-framework'):
                        dep = dep.split('>')[0]
                        requires.append(dep)

        frameworks.append(subdir)
        for dep in requires:
            partial_order.append((dep, subdir))

    frameworks = topological_sort(frameworks, partial_order)
    return frameworks


def build_project(interpreter, project):
    lg = logging.getLogger("build_project")

    proj_dir = os.path.join(TOP_DIR, project)

    # Clean up any existing build artifacts
    if os.path.exists(os.path.join(proj_dir, 'build')):
        shutil.rmtree(os.path.join(proj_dir, 'build'))
    if os.path.exists(os.path.join(proj_dir, 'dist')):
        shutil.rmtree(os.path.join(proj_dir, 'dist'))

    # Actually build
    lg.info("building %r using %r", project, interpreter)
    status = subprocess.call(
            [interpreter, "setup.py", "install"],
            cwd=proj_dir)
    if status != 0:
        lg.warning("build %r failed (status %s)", project, status)
        return False

    status = subprocess.call(
            [interpreter, "-c", "import pkg_resources; pkg_resources.require(%r)"%(project)])
    if status != 0:
        lg.warning("build %r failed: package not actually installed?", project)
        return False

    return True


def run_tests(interpreter, arch, project, state_dir):
    lg = logging.getLogger("run_tests")

    proj_dir = os.path.join(TOP_DIR, project)

    lg.info("testing %r using %r (%7s)", project, interpreter, arch)
    p = subprocess.Popen(
            ["/usr/bin/arch", "-%s"%(arch,), interpreter, "setup.py", "test", "--verbosity=3"],
            cwd=proj_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
    )
    stdout, stderr = p.communicate()
    exitcode = p.wait()

    try:
        status_line = stdout.decode('utf-8').rsplit('\n',2)[-2]
        if not status_line.startswith('SUMMARY'):
            status = {
                'message': 'No status line at end',
            }
        else:
            status = eval(status_line.split(None, 1)[1])

    except IndexError:
        status = {
            'message': 'Cannot fetch status line',
            'stdout': stdout,
        }

    status['exitcode'] = exitcode

    if not os.path.exists(state_dir):
        os.makedirs(state_dir)

    with open(os.path.join(state_dir, project + '.status'), 'w') as fp:
        json.dump(status, fp)

    with open(os.path.join(state_dir, project + '.stdout'), 'wb') as fp:
        fp.write(stdout)

    with open(os.path.join(state_dir, project + '.stderr'), 'wb') as fp:
        fp.write(stderr)


def test_summary(fp_out, state_dir):
    print("Build information")
    print("=================")
    with open(os.path.join(state_dir, "build-info.txt")) as fp:
        fp_out.write(fp.read())


    results = collections.defaultdict(dict)

    for nm in os.listdir(state_dir):
        if nm.endswith(".txt"): continue

        sd = os.path.join(state_dir, nm)
        for fn in os.listdir(sd):
            if not fn.endswith('.status'): continue
            proj = fn[:-7]
            proj = proj.replace("pyobjc-framework-", "FWK: ")

            with open(os.path.join(sd, fn)) as fp:
                results[proj][nm] = json.load(fp)

    keys = tuple(sorted(results[next(iter(results))].keys()))

    fmt = "%26s" + " | %10s" * len(keys)
    print(file=fp_out); print()
    print(fmt % (("Project",) + keys), file=fp_out)
    print((fmt % ((len(keys)+1)  * ("",))).replace(" ", "=").replace("|", "+"), file=fp_out)

    ok = True
    for proj in sorted(results):
        row = [proj]
        for k in keys:
            info = results[proj][k]
            if info.get("errors"):
                row.append("E:{}".format(info["errors"]))
                ok = False
            elif info.get("fails"):
                row.append("F:{}".format(info["fails"]))
                ok = False
            elif 'count' not in info and info.get("message"):
                row.append("CRASH")
                ok = False
            else:
                row.append("")

        print(fmt % tuple(row), file=fp_out)
    return ok




def main():
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
    lg = logging.getLogger("runtests")

    osx_release = platform.mac_ver()[0]

    lg.info("running PyObjC tests on OSX %s", osx_release)
    osx_dir = os.path.join(TEST_STATE_DIR, ".".join(osx_release.split(".")[:2]))
    if not os.path.exists(osx_dir):
        os.makedirs(osx_dir)

    system_report(os.path.join(osx_dir, "build-info.txt"))

    build_order = ['pyobjc-core'] + sort_framework_wrappers()

    for py_ver in PY_VERSIONS:
        with virtualenv("python{}".format(py_ver)) as interpreter:
            # First install packages into the virtualenv
            for project in build_order:
                build_project(interpreter, project)

            # Then run tests for all supported architectures
            for arch in ('i386', 'x86_64'):
                lg.info("running with Python %s (%7s) using %s", py_ver, arch, interpreter)
                state_dir = os.path.join(osx_dir, "%s-%s"%(py_ver, arch))

                for project in build_order:
                    run_tests(interpreter, arch, project, state_dir)

    lg.info("done")
    with open(os.path.join(osx_dir, "summary.txt"), "w") as fp:
        test_summary(fp, osx_dir)

    ok = test_summary(sys.stdout, osx_dir)
    if not ok:
        print()
        print("ERROR: some tests have failures")
        sys.exit(1)

if __name__ == "__main__":
    main()
